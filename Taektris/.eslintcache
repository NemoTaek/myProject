[{"/home/jht/codestates/개인프로젝트/myProject/Taektris/src/index.tsx":"1","/home/jht/codestates/개인프로젝트/myProject/Taektris/src/reportWebVitals.ts":"2","/home/jht/codestates/개인프로젝트/myProject/Taektris/src/App.tsx":"3","/home/jht/codestates/개인프로젝트/myProject/Taektris/src/component/board.tsx":"4","/home/jht/codestates/개인프로젝트/myProject/Taektris/src/component/constant.tsx":"5","/home/jht/codestates/개인프로젝트/myProject/Taektris/src/component/piece.tsx":"6"},{"size":500,"mtime":1609829406738,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1609829406738,"results":"9","hashOfConfig":"8"},{"size":9987,"mtime":1611296241011,"results":"10","hashOfConfig":"8"},{"size":7092,"mtime":1611295264245,"results":"11","hashOfConfig":"8"},{"size":1507,"mtime":1611124172869,"results":"12","hashOfConfig":"8"},{"size":2672,"mtime":1611294989572,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"kj58fi",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jht/codestates/개인프로젝트/myProject/Taektris/src/index.tsx",[],["28","29"],"/home/jht/codestates/개인프로젝트/myProject/Taektris/src/reportWebVitals.ts",[],"/home/jht/codestates/개인프로젝트/myProject/Taektris/src/App.tsx",["30","31"],"import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { KEY, POINTS, LEVEL } from './component/constant'\nimport Board from './component/board'\n\nfunction App() {\n  let mapRef = useRef(null);\n  let nextRef = useRef(null);\n\n  // 게임 내 점수, 라인 수, 레벨 정보\n  let accountValues = {\n    score: 0,\n    lines: 0,\n    level: 0\n  }\n\n  useEffect(() => {\n    let map = mapRef.current;\n    let next = nextRef.current;\n    let mapContext = map.getContext('2d');\n    let nextContext = next.getContext('2d');\n\n    let requestId: any;\n    let time: any;\n\n    // 블럭 이동 세팅\n    const moves = {\n      [KEY.LEFT]: (p: any) => ({ ...p, x: p.x - 1 }),\n      [KEY.RIGHT]: (p: any) => ({ ...p, x: p.x + 1 }),\n      [KEY.DOWN]: (p: any) => ({ ...p, y: p.y + 1 }),\n      [KEY.SPACE]: (p: any) => ({ ...p, y: p.y + 1 }),\n      [KEY.UP]: (p: any) => board.rotate(p)\n    }\n\n    // bgm 및 기타 오디오 설정\n    let soundPlaying = false;\n    document.querySelector('#sound_speaker').textContent = \"\\u{1F507}\";\n    document.querySelector(\"#sound_description\").textContent = \"off\";\n    let bgmArray = [\n      \"asset/sounds/BRADINSKY.mp3\",\n      \"asset/sounds/KARINKA.mp3\",\n      \"asset/sounds/LOGINSKA.mp3\",\n      \"asset/sounds/TROIKA.mp3\",\n      \"asset/sounds/tetris_elec.mp3\"\n    ]\n\n    let opening: HTMLAudioElement = document.querySelector(\"#opening\");\n    let bgm: HTMLAudioElement = document.querySelector(\"#bgm\");\n    let gameoverSound: HTMLAudioElement = document.querySelector(\"#gameover\");\n    let dropSound: HTMLAudioElement = document.querySelector(\"#drop\");\n    let bgmElement: HTMLElement = document.querySelector(\"#sound_wrap\");\n    // bgm ON/OFF 클릭 시 소리 재생/중지\n    bgmElement.addEventListener(\"click\", () => {\n      if (!soundPlaying) {\n        opening.pause();\n        bgmOn();\n        soundPlaying = true;\n      }\n      else {\n        bgmOff();\n        soundPlaying = false;\n      }\n    });\n\n    // bgm 시작\n    const bgmOn = () => {\n      document.querySelector('#sound_speaker').textContent = \"\\u{1F509}\";\n      document.querySelector(\"#sound_description\").textContent = \"ON\";\n\n      // 위에서 선언한 src 배열중 랜덤으로 하나 선택 후 재생\n      bgm.src = bgmArray[Math.floor(Math.random() * bgmArray.length)];\n      bgm.load();\n      bgm.play();\n    }\n    // bgm 정지\n    const bgmOff = () => {\n      document.querySelector('#sound_speaker').textContent = \"\\u{1F507}\";\n      document.querySelector(\"#sound_description\").textContent = \"OFF\";\n      bgm.pause();\n    }\n\n    // bgm 랜덤재생\n    // bgm의 한 곡이 끝났을 때 다시 bgm을 시작하여 랜덤의 곡으로 재생\n    bgm.addEventListener(\"ended\", () => {\n      bgmOn();\n    })\n\n    // 레벨 커스텀\n    let levelUp: HTMLButtonElement = document.querySelector('.level_up');\n    levelUp.addEventListener(\"click\", () => {\n      levelDown.disabled = false;\n      // 최고 레벨은 10까지로 제한\n      if (accountValues.level >= 9) {\n        levelUp.disabled = true;\n      }\n      else {\n        levelUp.disabled = false;\n      }\n      accountValues.level++;\n      document.querySelector(\"#level\").textContent = accountValues.level.toString();\n    });\n\n    let levelDown: HTMLButtonElement = document.querySelector('.level_down');\n    // 처음 세팅은 level down을 할 수 없으므로 disabled\n    levelDown.disabled = true;\n    levelDown.addEventListener(\"click\", () => {\n      if (accountValues.level <= 1) {\n        levelDown.disabled = true;\n      }\n      // 10레벨에서 level down 버튼 클릭하면 다시 levelup 버튼 활성화\n      else if (accountValues.level >= 9) {\n        levelUp.disabled = false;\n      }\n      else {\n        levelDown.disabled = false;\n      }\n      accountValues.level--;\n      document.querySelector(\"#level\").textContent = accountValues.level.toString();\n    });\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // 게임 시작 버튼 클릭 후 로직\n    let board = new Board(mapContext, nextContext);\n\n    // 게임 시작 버튼 클릭\n    document.querySelector('.play-button').addEventListener(\"click\", (e) => {\n      // 오프닝 bgm 중지\n      opening.pause();\n      // 레벨 커스텀 중지\n      levelUp.style.display = \"none\";\n      levelDown.style.display = \"none\";\n      // 게임 시작\n      play();\n      // bgm 온\n      soundPlaying = true;\n      bgmOn();\n    }, true);\n\n    // 게임 시작\n    const play = (): void => {\n      addEventListener();\n      if (requestId) {\n        cancelAnimationFrame(requestId);\n      }\n      resetGame();\n      animate();\n    }\n\n    // 게임 설정 초기화\n    const resetGame = (): void => {\n      document.querySelector(\"#level\").textContent = accountValues.level.toString();\n      board.reset();\n      // 시작 시간, 경과 시간, 해당 레벨의 낙하 속도를 가지는 타이머 객체\n      time = { start: performance.now(), elapsed: 0, level: LEVEL[accountValues.level] };\n    }\n\n    const animate = (now: number = 0): void => {\n      // 점수, 라인 수, 레벨 출력\n      document.querySelector(\"#score\").textContent = accountValues.score.toString();\n      document.querySelector(\"#lines\").textContent = accountValues.lines.toString();\n      document.querySelector(\"#level\").textContent = accountValues.level.toString();\n\n      // 경과시간 업데이트\n      time.elapsed = now - time.start;\n\n      // 경과시간이 현재 레벨의 시간을 넘었다면\n      // 시작시간을 0으로 초기화 하고 하강시킴\n      if (time.elapsed > time.level) {\n        time.start = now;\n\n        // 시작시간을 초기화 하자마자 충돌이 나면 게임오버\n        if (!board.drop(moves, time, accountValues)) {\n          gameOver();\n          return;\n        }\n      }\n\n      // 맵 초기화 후 그리기\n      mapContext.clearRect(0, 0, mapContext.canvas.width, mapContext.canvas.height);\n      board.drawPiece();\n\n      // 애니메이션 변수에 담아 flag 설정\n      requestId = requestAnimationFrame(animate);\n    }\n\n    // 키보드 이벤트(블록 움직임, 하드 드롭, 일시정지)\n    const addEventListener = () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      document.addEventListener('keydown', handleKeyPress);\n    }\n\n    const handleKeyPress = (event: any) => {\n      if (moves[event.code]) {\n        // 이벤트 버블링 방지\n        event.preventDefault();\n\n        // 조각의 상태를 얻음\n        let p = moves[event.code](board.piece);\n\n        // space 누르면 수직 강하\n        if (event.code === KEY.SPACE) {\n          while (board.valid(p)) {\n            board.piece.move(p);\n            p = moves[KEY.DOWN](board.piece);\n            accountValues.score += POINTS.HARD_DROP;\n          }\n          board.piece.hardDrop();\n          dropSound.src = \"asset/sounds/drop.mp3\";\n          dropSound.load();\n          dropSound.play();\n        }\n\n        // 이동이 가능한 상태라면 이동\n        else if (board.valid(p)) {\n          board.piece.move(p);\n          if (event.code === KEY.DOWN) {\n            accountValues.score += POINTS.SOFT_DROP;\n          }\n        }\n      }\n\n      // p 키를 눌러 일시정지\n      else if (event.code === KEY.P) {\n        pause();\n      }\n    };\n\n    // 게임오버\n    const gameOver = () => {\n      bgmOff();\n      cancelAnimationFrame(requestId);\n\n      // game over 창 띄우기\n      mapContext.fillStyle = 'white';\n      mapContext.fillRect(1, 3, 8, 1.2);\n      mapContext.font = '1px Arial';\n      mapContext.fillStyle = 'red';\n      mapContext.fillText('GAME OVER', 1.8, 4);\n\n      gameoverSound.src = \"asset/sounds/gameover.mp3\";\n      gameoverSound.load();\n      gameoverSound.play();\n\n      levelUp.style.display = \"inline-block\";\n      levelDown.style.display = \"inline-block\";\n    }\n\n    // 일시정지\n    const pause = () => {\n      // 일시정지 중이었다면 다시 실행\n      if (!requestId) {\n        animate();\n        bgmOn();\n        return;\n      }\n\n      // 진행중이었다면 일시정지\n      cancelAnimationFrame(requestId);\n      requestId = null;\n\n      mapContext.fillStyle = 'white';\n      mapContext.fillRect(1, 3, 8, 1.2);\n      mapContext.font = '1px Arial';\n      mapContext.fillStyle = 'red';\n      mapContext.fillText('PAUSED', 3, 4);\n\n      bgmOff();\n    }\n  }, [])\n\n  return (\n    <div id=\"background\">\n      <div className=\"wrap\">\n        <canvas id=\"tetris_map\" ref={mapRef}></canvas>\n        <div className=\"next_wrap\">\n          <div className=\"next_wrap_info\">\n            <h1>TETRIS</h1>\n            <p>Score: <span id=\"score\">0</span></p>\n            <p>Lines: <span id=\"lines\">0</span></p>\n            <p>Level: <span id=\"level\">{accountValues.level}</span>\n              <div className=\"level_wrap\">\n                <button className=\"level_up\">↑</button>\n                <button className=\"level_down\">↓</button>\n              </div>\n            </p>\n            <div className=\"next\">\n              <p>NEXT</p>\n              <canvas id=\"next\" ref={nextRef} style={{ backgroundColor: \"black\" }}></canvas>\n            </div>\n            <div id=\"sound_wrap\">\n              <span className=\"sound_item\" id=\"sound_speaker\"></span>\n              <span className=\"sound_item\" id=\"sound_description\"></span>\n              {/* <iframe title=\"a\" id=\"openingIframe\" src=\"asset/sounds/drop.mp3\" allow=\"autoplay\" style={{ display: \"none\" }}></iframe> */}\n              <audio id=\"opening\" autoPlay>\n                <source src=\"asset/sounds/opening.mp3\" type=\"audio/mp3\"></source>\n              </audio>\n              <audio id=\"bgm\"></audio>\n              <audio id=\"line\"></audio>\n              <audio id=\"drop\"></audio>\n              <audio id=\"gameover\"></audio>\n            </div>\n          </div>\n          <button className=\"play-button\">Play</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/jht/codestates/개인프로젝트/myProject/Taektris/src/component/board.tsx",[],"/home/jht/codestates/개인프로젝트/myProject/Taektris/src/component/constant.tsx",[],"/home/jht/codestates/개인프로젝트/myProject/Taektris/src/component/piece.tsx",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":1,"column":17,"nodeType":"38","messageId":"39","endLine":1,"endColumn":25},{"ruleId":"40","severity":1,"message":"41","line":270,"column":6,"nodeType":"42","endLine":270,"endColumn":8,"suggestions":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'accountValues'. Either include it or remove the dependency array.","ArrayExpression",["46"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [accountValues]",{"range":"49","text":"50"},[7635,7637],"[accountValues]"]